extend type Query {
    communities: [Community!]! @all @softDeletes @guard @can(ability: "viewAny")
    community(id: ID! @eq): Community @find @can(ability: "view", find: "id")
}

extend type Mutation {
  createCommunity(input: CreateCommunityInput! @spread): Community @create @guard @can(ability: "create")
  updateCommunity(input: UpdateCommunityInput! @spread): Community @update @guard @can(ability: "update", find: "id")
  deleteCommunity(id: ID!): Community @delete @guard @can(ability: "delete", find: "id")
}

input CreateCommunityInput @validator {
  name: String! @rules(apply: ["unique:communities,name"])
  description: String!
  moderators: CreateUpdateUsers!
}

input UpdateCommunityInput @validator {
  id: ID!
  name: String
  description: String
  moderators: CreateUpdateUsers
  subscribers: CreateUpdateUsers
}

type Community {
    id: ID!
    name: String!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    moderators: [User!]! @belongsToMany
    subscribers: [User!]! @belongsToMany
    posts: [Post]! @hasMany
}

input CreateUpdateUsers {
  sync: [ID!]
  disconnect: [ID!]
}
